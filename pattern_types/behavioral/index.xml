<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Behavioral Patterns on SWPatterns.com</title><link>http://www.swpatterns.com/pattern_types/behavioral/</link><description>Recent content in Behavioral Patterns on SWPatterns.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 19 Mar 2021 10:45:34 +0100</lastBuildDate><atom:link href="http://www.swpatterns.com/pattern_types/behavioral/index.xml" rel="self" type="application/rss+xml"/><item><title>Observer</title><link>http://www.swpatterns.com/pattern/observer/</link><pubDate>Fri, 19 Mar 2021 10:45:34 +0100</pubDate><guid>http://www.swpatterns.com/pattern/observer/</guid><description>
&lt;p>Oberver Pattern enables the broadcast communication between an event subject, that emits changes to its state to all of its observers.&lt;/p>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>Modern day usage is biased by the existence of rx and the reactive libraries across most important languages. Most modern libraries rely on observables and observers to get the most out of streams.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>The best example both usage and implementation is &lt;a href="http://reactivex.io/">http://reactivex.io/&lt;/a>. In Angular it is very common for data binding matters.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Structural Patterns on SWPatterns.com</title><link>http://www.swpatterns.com/pattern_types/structural/</link><description>Recent content in Structural Patterns on SWPatterns.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 23 Mar 2021 11:29:42 +0100</lastBuildDate><atom:link href="http://www.swpatterns.com/pattern_types/structural/index.xml" rel="self" type="application/rss+xml"/><item><title>Composite</title><link>http://www.swpatterns.com/pattern/composite/</link><pubDate>Tue, 23 Mar 2021 11:29:42 +0100</pubDate><guid>http://www.swpatterns.com/pattern/composite/</guid><description>
&lt;p>The Composite Pattern enables us to collect objects into trees that can be easily explored.
The Parent represents the access point to the tree, where it in fact will be a Container, usually. The container will be able to contain other Container objects or Leaf objects.&lt;/p>
&lt;p>Often the sublcasses or the leaves can be instantiated thorugh the various factory patterns.&lt;/p>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>Typical example is the file system. every folder and every single file are files. Folders contain also other files.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;ul>
&lt;li>File system&lt;/li>
&lt;/ul></description></item><item><title>Adapter</title><link>http://www.swpatterns.com/pattern/adapter/</link><pubDate>Mon, 15 Mar 2021 13:24:44 +0100</pubDate><guid>http://www.swpatterns.com/pattern/adapter/</guid><description>
&lt;p>The adapter aims to be a converter between two specific interfaces: one belonging to &amp;ldquo;our&amp;rdquo; side of the application, the other to the library or other tool we need to interact with. This is very important, because it enables us to delay decisions, as the choice of a spcific implementation of the adapter becomes less important due to the fact that we are at that point using the adapter itself as our communication contract.&lt;/p>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>Often used in combo with other patterns, such as [Inversion of Control] and several &lt;a href="http://www.swpatterns.com/pattern_types/factory/">Factories&lt;/a>&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>Typical example of this pattern in a &amp;ldquo;pure&amp;rdquo; form is the Driver. Whether it is for printing or for database access, the API exposed by the common development systems just require the connection to the adapter and, with some kind of &lt;a href="http://www.swpatterns.com/pattern_types/factory/">Factory&lt;/a> or repository we get the specific implementation of what we need at the moment, based on the configuration of the system we have.&lt;/p></description></item></channel></rss>